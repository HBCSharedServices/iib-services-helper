/**
 * Â© Qio Technologies Ltd. 2016. All rights reserved.
 * CONFIDENTIAL AND PROPRIETARY INFORMATION OF QIO TECHNOLOGIES LTD.
 */
package io.qio.qa.lib.ehm.model.asset;

import io.qio.qa.lib.common.BaseHelper;
import io.qio.qa.lib.ehm.model.common.Links;
import io.qio.qa.lib.ehm.model.asset.AssetStatus;
import org.apache.log4j.Logger;
import org.codehaus.jackson.annotate.JsonProperty;

import java.lang.reflect.Field;

public abstract class Asset {
	protected String abbreviation;
	protected String name;
	protected String description;
	protected String status;
	protected String tenant;

	// returned in the response of a POST request
	protected String createdDate;
	protected String assetId;
	
	@JsonProperty("_links")
	protected Links _links;

	public Asset() {
	}

	@SuppressWarnings("serial")
	public Asset(String timeStamp, String tenant) {
		this.abbreviation = "A" + timeStamp;
		this.name = "A" + timeStamp + "Name";
		this.description = "A" + timeStamp + "Desc";
		this.status = AssetStatus.CREATED.toString();
		this.tenant = tenant;
	}

	public Asset(String abbreviation, String name, String description, String tenant, String status) {
		this.abbreviation = abbreviation;
		this.name = name;
		this.description = description;
		this.tenant = tenant;
		this.status = status;
	}

	public String getAssetId() {
		return assetId;
	}
	
	public String getAbbreviation() {
		return abbreviation;
	}

	public void setAbbreviation(String abbreviation) {
		this.abbreviation = abbreviation;
	}

	public String getStatus() {
		return status;
	}

	public void setStatus(String status) {
		this.status = status;
	}

	public String getTenant() {
		return tenant;
	}

	public void setTenant(String tenant) {
		this.tenant = tenant;
	}

	public String getCreatedDate() {
		return createdDate;
	}

//	public void setCreatedDate(String createdDate) {
//		this.createdDate = createdDate;
//	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public Links get_links() {
		return _links;
	}

	public void set_links(Links _links) {
		this._links = _links;
	}

	@Override
	public boolean equals(Object responseObj) {
		Logger logger = Logger.getRootLogger();
		Boolean equalityCheckFlag = true;
		try {
			if (!(responseObj instanceof Asset) || responseObj == null)
				return false;

			Field[] fields = Asset.class.getDeclaredFields();
			for (Field field : fields) {
				// Checking for the format of the Date Field.
				if (field.getName().equals("createdDate")) {
					logger.info("Checking validity of date format for "+field.getName().toString());
					if (!(BaseHelper.isDateCorrectlyFormattedForISO8601NoMS((String) field.get(responseObj), field.getName()) && BaseHelper.isDateCorrectlyFormattedForISO8601NoMS((String) field.get(this), field.getName())))
						return false;
				}
				//Exclude all the fields that are generated by the system; note that eventDate could also be populated in the input but it is included here to make it simple
				//if ((field.getName().equals("createdDate") ||  field.getName().equals("eventDate") || field.getName().equals("lastModifiedDate") || field.getName().equals("referenceId") || field.getName().equals("insightId") || field.getName().equals("insightTypeId"))) {
				if (field.getName().contains("Date") || field.getName().contains("Id")) {
					logger.info("Skip the value checking of field " + field.getName().toString());
				} else {
					Object requestVal = field.get(this);
					Object responseVal = field.get(responseObj);
					logger.info("Checking value of field " + field.getName().toString());
					if (requestVal != null)
						if (!requestVal.equals(responseVal)) {
							equalityCheckFlag = false;
							logger.error("Class Name: " + this.getClass().getName() + " --> Match failed on property: " + field.getName() + ", Request Value: " + requestVal + ", Response Value: "
									+ responseVal);
							break;
						}
				}
			}
		} catch (IllegalArgumentException e) {
			logger.error(e.getMessage());
		} catch (IllegalAccessException e) {
			logger.error(e.getMessage());
		}
		return equalityCheckFlag;
	}

//	public boolean isDateCorrectlyFormatted(String inputDate, String fieldName) {
//		Logger logger = Logger.getRootLogger();
//		Boolean dateFormatCheckerFlag = true;
//		String dateFormatCheckerRegex = "^\\d\\d\\d\\d-(0?[1-9]|1[0-2])-(0?[1-9]|[12][0-9]|3[01])T(00|0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])Z$";
//		if (!inputDate.matches(dateFormatCheckerRegex)) {
//			dateFormatCheckerFlag = false;
//			logger.error("Incorrectly formatted Date: " + fieldName + inputDate);
//		}
//		return dateFormatCheckerFlag;
//	}
}