/**
 * Â© Qio Technologies Ltd. 2016. All rights reserved.
 * CONFIDENTIAL AND PROPRIETARY INFORMATION OF QIO TECHNOLOGIES LTD.
 */
package io.qio.qa.lib.ehm.model.insight;

import io.qio.qa.lib.ehm.model.common.Links;
import io.qio.qa.lib.ehm.model.insight.InsightSeverity;
import org.apache.log4j.Logger;
import org.codehaus.jackson.annotate.JsonProperty;
import java.lang.reflect.Field;

public abstract class Insight {
	protected String title;
	protected String description;
	protected String status;
	protected String severity;
	protected String tenantId;
	protected String insightTypeId;
	
	protected String createdDate;
	protected String lastModifiedDate;
	protected String eventDate;
	protected String referenceId;
	protected String insightId;
	
	@JsonProperty("_links")
	protected Links _links;

	public Insight() {
	}

	@SuppressWarnings("serial")
	public Insight(String timeStamp, String tenantId, String insightTypeId) {
		this.title = "I" + timeStamp + "Title";
		this.description = "I" + timeStamp + "Desc";
		this.tenantId = tenantId;
		this.insightTypeId = insightTypeId;
		this.severity = InsightSeverity.INFORMATIONAL.toString();
		this.eventDate = null;
	}

	public Insight(String title, String description, String tenantId, String insightTypeId) {
		this.title = title;
		this.description = description;
		this.tenantId = tenantId;
		this.insightTypeId = insightTypeId;
		this.severity = InsightSeverity.INFORMATIONAL.toString();
		this.eventDate = null;
	}

	public String getStatus() {
		return status;
	}

	public void setStatus(String status) {
		this.status = status;
	}

	public String getSeverity() {
		return severity;
	}

	public void setSeverity(String severity) {
		this.severity = severity;
	}
	public String getTenantId() {
		return tenantId;
	}

	public void setTenantId(String tenantId) {
		this.tenantId = tenantId;
	}

	public String getEventDate() {
		return eventDate;
	}

	public void setEventDate(String eventDate) {
		this.eventDate = eventDate;
	}

	public String getLastModifiedDate() {
		return lastModifiedDate;
	}

	public String getCreatedDate() {
		return createdDate;
	}

	public String getReferenceId() {
		return referenceId;
	}

	public String getInsightId() {
		return insightId;
	}

	public String getTitle() {
		return title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public Links get_links() {
		return _links;
	}

	public void set_links(Links _links) {
		this._links = _links;
	}

	@Override
	public boolean equals(Object responseObj) {
		Logger logger = Logger.getRootLogger();
		Boolean equalityCheckFlag = true;
		try {
			if (!(responseObj instanceof Insight) || responseObj == null)
				return false;

			Field[] fields = Insight.class.getDeclaredFields();
			for (Field field : fields) {
				// Checking for the format of the Date Field.
				if (field.getName().equals("createdDate") || field.getName().equals("eventDate") || field.getName().equals("lastModifiedDate")) {
					logger.info("Checking validity of date format for "+field.getName().toString());
					if (!(isDateCorrectlyFormatted((String) field.get(this), field.getName()) && isDateCorrectlyFormatted((String) field.get(responseObj), field.getName())))
						return false;
				}
				//Exclude all the fields that are generated by the system; note that eventDate could also be populated in the input but it is included here to make it simple
				if (!(field.getName().contains("Date") || field.getName().contains("Id"))) {
				//if (!(field.getName().equals("createdDate") && field.getName().equals("eventDate") && field.getName().equals("lastModifiedDate") && field.getName().equals("referenceId") && field.getName().equals("insightId") && field.getName().equals("insightTypeId"))) {
					Object requestVal = field.get(this);
					Object responseVal = field.get(responseObj);
					logger.info("Checking value of field "+field.getName().toString());
					if (requestVal != null)
						if (!requestVal.equals(responseVal)) {
							equalityCheckFlag = false;
							logger.error("Class Name: " + this.getClass().getName() + " --> Match failed on property: " + field.getName() + ", Request Value: " + requestVal + ", Response Value: "
									+ responseVal);
							break;
						}
				}
			}
		} catch (IllegalArgumentException e) {
			logger.error(e.getMessage());
		} catch (IllegalAccessException e) {
			logger.error(e.getMessage());
		}
		return equalityCheckFlag;
	}

	public boolean isDateCorrectlyFormatted(String inputDate, String fieldName) {
		Logger logger = Logger.getRootLogger();
		Boolean dateFormatCheckerFlag = true;
		String dateFormatCheckerRegex = "^\\d\\d\\d\\d-(0?[1-9]|1[0-2])-(0?[1-9]|[12][0-9]|3[01])T(00|0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]).([0-9][0-9][0-9])Z$";

		if (!inputDate.matches(dateFormatCheckerRegex)) {
			dateFormatCheckerFlag = false;
			logger.error("Incorrectly formatted Date: " + fieldName + inputDate);
		}
		return dateFormatCheckerFlag;
	}
}

